# Errors in python

## SynaxError: these must be fixed and are bugs generated by improper syntax when coding, e.g. print("Hello world!) <-- a " is missing at the end!
## ValueError: for example when passing the wrong type of argument to a function, e.g. a string instead of an integer
## NameError: this means that you are doing something woth the name of a variable that you shouldn't be doing; e.g. use a variable that hasn'y been defined


## Errors in python are handeled using two keywords: "try" and "except"; literally, try to do something.
# If something (to be specified!) goes wrong (the except part), do something else
try:
    x = int(input("What is x? "))
    print(f"x is {x}")
except ValueError:
    print("x is not an integer")
    
try:
    x = int(input("What is x? "))
except ValueError:
    print("x is not an integer")
    
print(f"x is {x}")

# The last two try/except look the same, but it is not really true... the second can cause a value error.
# In fact if the user inputs something like "cat", this will cause a ValueError in the int() function
# WHICH WILL IMMEDIATELY TRIGGER THE EXCEPT BLOCK. In particular, this makes the program skip the part
# where the left hand side (int(input("What is x? "))) is assigned to the right hand side (x).
# This means that in some cases x might not be defined which can cause a NameError at line 21

# The porblem is solved by using the try/except/else paradigm:
while True:
    try:
        x = int(input("What is x? "))
    except ValueError:
        print("x is not an integer")
    else:   
        break
print(f"x is {x}")
# The "else" block is executed if nothing goes wrong: This means that if the except is not executed then the else will be
# NB, the above code "forces" the user to type an integer
# Just out of curiosity, the following code delivers the same result as the block above (which is justified the functioning of the try/except,
# in particular the fact that THE EXCEPT BLOCK IS IMMEDIATELY TRIGGERED IF THE EXCEPTION RAISES)
while True:
    try:
        x = int(input("What is x? "))
        break # This gets ignored if the ValueError exception rises, as the except block is immediately triggered in that case
    except ValueError:
        print("x is not an integer")
print(f"x is {x}")

# Let's create a function out of it
#def get_int():
#    while True:
#        try:
#            x = int(input("What is x? "))
#        except ValueError:
#            print("x is not an integer")
#        else:   
#            return x

# The previous function can be improved
def get_int(prompt):
    try:
        return int(input(prompt))
    except ValueError:
        pass # This is a keyword used in case you don't want to do anything in case the ValueError exception is triggered
        